"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debugNode = debugNode;
exports.debugNodes = debugNodes;
exports.indent = indent;
exports.spaces = spaces;
exports.typeName = typeName;
var _lodash = _interopRequireDefault(require("lodash.escape"));
var _functionPrototype = _interopRequireDefault(require("function.prototype.name"));
var _isString = _interopRequireDefault(require("is-string"));
var _isNumberObject = _interopRequireDefault(require("is-number-object"));
var _isCallable = _interopRequireDefault(require("is-callable"));
var _isBooleanObject = _interopRequireDefault(require("is-boolean-object"));
var _objectInspect = _interopRequireDefault(require("object-inspect"));
var _hasown = _interopRequireDefault(require("hasown"));
var _RSTTraversal = require("./RSTTraversal");
var _getAdapter = _interopRequireDefault(require("./getAdapter"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var booleanValue = Function.bind.call(Function.call, Boolean.prototype.valueOf);
function typeName(node) {
  var adapter = (0, _getAdapter["default"])();
  if (adapter.displayNameOfNode) {
    return (0, _getAdapter["default"])().displayNameOfNode(node) || 'Component';
  }
  return typeof node.type === 'function' ? node.type.displayName || (0, _functionPrototype["default"])(node.type) || 'Component' : node.type;
}
function spaces(n) {
  return Array(n + 1).join(' ');
}
function indent(depth, string) {
  return string.split('\n').map(function (x) {
    return "".concat(spaces(depth)).concat(x);
  }).join('\n');
}
function propString(prop, options) {
  if ((0, _isString["default"])(prop)) {
    return (0, _objectInspect["default"])(String(prop), {
      quoteStyle: 'double'
    });
  }
  if ((0, _isNumberObject["default"])(prop)) {
    return "{".concat((0, _objectInspect["default"])(Number(prop)), "}");
  }
  if ((0, _isBooleanObject["default"])(prop)) {
    return "{".concat((0, _objectInspect["default"])(booleanValue(prop)), "}");
  }
  if ((0, _isCallable["default"])(prop)) {
    return "{".concat((0, _objectInspect["default"])(prop), "}");
  }
  if (_typeof(prop) === 'object') {
    if (options.verbose) {
      return "{".concat((0, _objectInspect["default"])(prop), "}");
    }
    return '{{...}}';
  }
  return "{[".concat((0, _objectInspect["default"])(prop), "]}");
}
function propsString(node, options) {
  var props = (0, _RSTTraversal.propsOfNode)(node);
  var keys = Object.keys(props).filter(function (x) {
    return x !== 'children';
  });
  return keys.map(function (key) {
    return "".concat(key, "=").concat(propString(props[key], options));
  }).join(' ');
}
function indentChildren(childrenStrs, indentLength) {
  return childrenStrs.length ? "\n".concat(childrenStrs.map(function (x) {
    return indent(indentLength, x);
  }).join('\n'), "\n") : '';
}
function isRSTNodeLike(node) {
  return (0, _hasown["default"])(node, 'nodeType') && typeof node.nodeType === 'string' && (0, _hasown["default"])(node, 'type') && (0, _hasown["default"])(node, 'key') && (0, _hasown["default"])(node, 'ref') && (0, _hasown["default"])(node, 'instance') && (0, _hasown["default"])(node, 'rendered');
}
function debugNode(node) {
  var indentLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (typeof node === 'string' || typeof node === 'number') return (0, _lodash["default"])(node);
  if (typeof node === 'function') {
    var name = (0, _functionPrototype["default"])(node);
    return "[function".concat(name ? " ".concat(name) : '', "]");
  }
  if (!node) return '';
  var adapter = (0, _getAdapter["default"])();
  if (!adapter.isValidElement(node) && !isRSTNodeLike(node)) {
    return "{".concat((0, _objectInspect["default"])(node), "}");
  }
  var childrenStrs = (0, _RSTTraversal.childrenOfNode)(node).map(function (n) {
    return debugNode(n, indentLength, options);
  }).filter(Boolean);
  var type = typeName(node);
  var props = options.ignoreProps ? '' : propsString(node, options);
  var beforeProps = props ? ' ' : '';
  var afterProps = childrenStrs.length ? '>' : ' ';
  var childrenIndented = indentChildren(childrenStrs, indentLength);
  var nodeClose = childrenStrs.length ? "</".concat(type, ">") : '/>';
  return "<".concat(type).concat(beforeProps).concat(props).concat(afterProps).concat(childrenIndented).concat(nodeClose);
}
function debugNodes(nodes) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return nodes.map(function (node) {
    return debugNode(node, undefined, options);
  }).join('\n\n\n');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=Debug.js.map