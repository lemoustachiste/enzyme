"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.childrenOfNode = childrenOfNode;
exports.findParentNode = findParentNode;
exports.getHTMLFromHostNodes = getHTMLFromHostNodes;
exports.getTextFromHostNodes = getTextFromHostNodes;
exports.getTextFromNode = getTextFromNode;
exports.hasClassName = hasClassName;
exports.nodeHasId = nodeHasId;
exports.nodeMatchesObjectProps = nodeMatchesObjectProps;
exports.parentsOfNode = parentsOfNode;
exports.pathToNode = pathToNode;
exports.propsOfNode = propsOfNode;
exports.treeFilter = treeFilter;
exports.treeForEach = treeForEach;
var _arrayPrototype = _interopRequireDefault(require("array.prototype.flat"));
var _object = _interopRequireDefault(require("object.entries"));
var _object2 = _interopRequireDefault(require("object.fromentries"));
var _isSubset = _interopRequireDefault(require("is-subset"));
var _functionPrototype = _interopRequireDefault(require("function.prototype.name"));
var _isRegex = _interopRequireDefault(require("is-regex"));
var _getAdapter = _interopRequireDefault(require("./getAdapter"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
function _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _iterableToArray(r) { if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r); }
function _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function propsOfNode(node) {
  return node && node.props || {};
}
function childrenOfNode(node) {
  if (!node) return [];
  var adapter = (0, _getAdapter["default"])();
  var adapterHasIsFragment = adapter.isFragment && typeof adapter.isFragment === 'function';
  var renderedArray = Array.isArray(node.rendered) ? (0, _arrayPrototype["default"])(node.rendered, 1) : [node.rendered];

  // React adapters before 16 will not have isFragment
  if (!adapterHasIsFragment) {
    return renderedArray;
  }
  return (0, _arrayPrototype["default"])(renderedArray.map(function (currentChild) {
    // If the node is a Fragment, we want to return its children, not the fragment itself
    if (adapter.isFragment(currentChild)) {
      return childrenOfNode(currentChild);
    }
    return currentChild;
  }), 1);
}
function hasClassName(node, className) {
  var classes = propsOfNode(node).className || '';
  classes = String(classes).replace(/\s/g, ' ');
  if ((0, _isRegex["default"])(className)) return className.test(classes);
  return " ".concat(classes, " ").indexOf(" ".concat(className, " ")) > -1;
}
function treeForEach(tree, fn) {
  if (tree) {
    fn(tree);
  }
  childrenOfNode(tree).forEach(function (node) {
    return treeForEach(node, fn);
  });
}
function treeFilter(tree, fn) {
  var results = [];
  treeForEach(tree, function (node) {
    if (fn(node)) {
      results.push(node);
    }
  });
  return results;
}

/**
 * To support sibling selectors we need to be able to find
 * the siblings of a node. The easiest way to do that is find
 * the parent of the node and access its children.
 *
 * This would be unneeded if the RST spec included sibling pointers
 * such as node.nextSibling and node.prevSibling
 * @param {*} root
 * @param {*} targetNode
 */
function findParentNode(root, targetNode) {
  var results = treeFilter(root, function (node) {
    if (!node.rendered) {
      return false;
    }
    return childrenOfNode(node).indexOf(targetNode) !== -1;
  });
  return results[0] || null;
}
function pathFilter(path, fn) {
  return path.filter(function (tree) {
    return treeFilter(tree, fn).length !== 0;
  });
}
function pathToNode(node, root) {
  var queue = [root];
  var path = [];
  var hasNode = function hasNode(testNode) {
    return node === testNode;
  };
  while (queue.length) {
    var current = queue.pop();
    var children = childrenOfNode(current);
    if (current === node) return pathFilter(path, hasNode);
    path.push(current);
    if (children.length === 0) {
      // leaf node. if it isn't the node we are looking for, we pop.
      path.pop();
    }
    queue.push.apply(queue, _toConsumableArray(children));
  }
  return null;
}
function parentsOfNode(node, root) {
  return (pathToNode(node, root) || []).reverse();
}
function nodeHasId(node, id) {
  return propsOfNode(node).id === id;
}
var CAN_NEVER_MATCH = {};
function replaceUndefined(v) {
  return typeof v !== 'undefined' ? v : CAN_NEVER_MATCH;
}
function replaceUndefinedValues(obj) {
  var newEntries = (0, _object["default"])(obj).map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      k = _ref2[0],
      v = _ref2[1];
    return [k, replaceUndefined(v)];
  });
  return (0, _object2["default"])(newEntries);
}
function nodeMatchesObjectProps(node, props) {
  return (0, _isSubset["default"])(propsOfNode(node), replaceUndefinedValues(props));
}
function getTextFromHostNode(hostNode) {
  if (typeof hostNode === 'string') {
    return String(hostNode || '');
  }
  if (!hostNode) {
    return '';
  }
  return hostNode.textContent || '';
}
function getTextFromRSTNode(node, _ref3) {
  var getCustom = _ref3.getCustom,
    handleHostNodes = _ref3.handleHostNodes,
    recurse = _ref3.recurse,
    _ref3$nullRenderRetur = _ref3.nullRenderReturnsNull,
    nullRenderReturnsNull = _ref3$nullRenderRetur === void 0 ? false : _ref3$nullRenderRetur;
  if (node == null) {
    return '';
  }
  if (typeof node === 'string' || typeof node === 'number') {
    return String(node);
  }
  if (getCustom && node.type && typeof node.type === 'function') {
    return getCustom(node);
  }
  if (handleHostNodes && node.nodeType === 'host') {
    return handleHostNodes(node);
  }
  if (node.rendered == null && nullRenderReturnsNull) {
    return null;
  }
  return childrenOfNode(node).map(recurse).join('');
}
function getTextFromNode(node) {
  return getTextFromRSTNode(node, {
    recurse: getTextFromNode,
    getCustom: function getCustom(_ref4) {
      var type = _ref4.type;
      return "<".concat(type.displayName || (0, _functionPrototype["default"])(type), " />");
    }
  });
}
function getTextFromHostNodes(node, adapter) {
  return getTextFromRSTNode(node, {
    recurse: function recurse(item) {
      return getTextFromHostNodes(item, adapter);
    },
    handleHostNodes: function handleHostNodes(item) {
      var nodes = [].concat(adapter.nodeToHostNode(item, true));
      return nodes.map(getTextFromHostNode).join('');
    }
  });
}
function getHTMLFromHostNode(hostNode) {
  if (hostNode == null) {
    return null;
  }
  return hostNode.outerHTML.replace(/\sdata-(reactid|reactroot)+="([^"]*)+"/g, '');
}
function getHTMLFromHostNodes(node, adapter) {
  return getTextFromRSTNode(node, {
    recurse: function recurse(item) {
      return getHTMLFromHostNodes(item, adapter);
    },
    handleHostNodes: function handleHostNodes(item) {
      var nodes = [].concat(adapter.nodeToHostNode(item, true));
      return nodes.map(getHTMLFromHostNode).join('');
    },
    nullRenderReturnsNull: true
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=RSTTraversal.js.map