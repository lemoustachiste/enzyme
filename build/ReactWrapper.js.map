{"version":3,"file":"ReactWrapper.js","names":["_arrayPrototype","_interopRequireDefault","require","_hasown","_stringPrototype","_Utils","_getAdapter","_Debug","_RSTTraversal","_selectors","e","__esModule","_callSuper","t","o","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","constructor","apply","_typeof","TypeError","_assertThisInitialized","ReferenceError","Object","setPrototypeOf","getPrototypeOf","bind","__proto__","_inherits","prototype","create","value","writable","configurable","defineProperty","_setPrototypeOf","_construct","r","arguments","push","p","Boolean","valueOf","call","Symbol","iterator","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","_objectSpread","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","_classCallCheck","a","n","_defineProperties","key","_createClass","i","_toPrimitive","toPrimitive","String","Number","NODE","sym","NODES","RENDERER","UNRENDERED","ROOT","OPTIONS","ROOT_NODES","WRAPPING_COMPONENT","LINKED_ROOTS","UPDATED_BY","findWhereUnwrapped","wrapper","predicate","undefined","treeFilter","flatMap","getNodeInternal","filterWhereUnwrapped","wrap","getNodesInternal","getRootNodeInternal","Error","nodeParents","node","parentsOfNode","privateSetNodes","nodes","privateSet","Array","isArray","ReactWrapper","root","passedOptions","global","window","document","options","makeOptions","adapter","getAdapter","isValidElement","renderer","createRenderer","mode","render","context","getNode","isCustomComponent","wrappingComponent","getWrappingComponentRenderer","WrappingComponentWrapper","getElement","_this","single","nodeToElement","getElements","_this2","map","getNodes","getDOMNode","nodeToHostNode","ref","refname","instance","refs","_this3","getWrappingComponent","update","_this4","linkedRoot","unmount","_this5","mount","_this6","setProps","props","_this7","callback","cloneElement","setState","state","_this8","nodeType","invokeSetStateCallback","setContext","_this9","contains","nodeOrNodes","other","containsChildrenSubArray","nodeEqual","elementToNode","containsMatchingElement","rstNode","nodeMatches","b","containsAllMatchingElements","_this0","every","containsAnyMatchingElements","_this1","some","equals","_this10","matchesElement","_this11","find","selector","reduceTreesBySelector","is","buildPredicate","isEmptyRender","renderedDive","filterWhere","_this12","not","text","getTextFromHostNodes","html","getHTMLFromHostNodes","loadCheerioRoot","simulate","event","_this13","mock","simulateEvent","simulateError","error","_this14","thisNode","rootNode","nodeHierarchy","concat","propsOfNode","name","_this15","_state","_this16","_context","children","allChildren","childrenOfNode","childAt","index","_this17","at","parents","_this18","allParents","parent","get","closest","matchingAncestors","first","findWhere","prop","propName","invoke","_this19","handler","_len","args","_key","response","wrapInvoke","renderProp","_this20","RangeError","hasOwn","propValue","element","wrapped","type","typeOfNode","displayNameOfNode","hasClass","className","indexOf","console","warn","hasClassName","fn","_this21","_this22","reduce","_this23","initialValue","accum","reduceRight","_this24","slice","begin","end","someWhere","_this25","everyWhere","_this26","_this27","flattened","flat","_this28","last","isEmpty","exists","fnName","_len2","_key2","debug","debugNodes","tap","intercepter","detach","attachTo","hostNodes","_ReactWrapper","_this29","ITERATOR_SYMBOL","iter","next","done","privateWarning","extraMessage","trim","_default","exports","module","default"],"sources":["../src/ReactWrapper.js"],"sourcesContent":["import flat from 'array.prototype.flat';\nimport hasOwn from 'hasown';\nimport trim from 'string.prototype.trim';\n\nimport {\n  containsChildrenSubArray,\n  typeOfNode,\n  displayNameOfNode,\n  ITERATOR_SYMBOL,\n  nodeEqual,\n  nodeMatches,\n  makeOptions,\n  sym,\n  privateSet,\n  cloneElement,\n  renderedDive,\n  isCustomComponent,\n  loadCheerioRoot,\n} from './Utils';\nimport getAdapter from './getAdapter';\nimport { debugNodes } from './Debug';\nimport {\n  propsOfNode,\n  hasClassName,\n  childrenOfNode,\n  parentsOfNode,\n  treeFilter,\n  getTextFromHostNodes,\n  getHTMLFromHostNodes,\n} from './RSTTraversal';\n\nimport { buildPredicate, reduceTreesBySelector } from './selectors';\n\nconst NODE = sym('__node__');\nconst NODES = sym('__nodes__');\nconst RENDERER = sym('__renderer__');\nconst UNRENDERED = sym('__unrendered__');\nconst ROOT = sym('__root__');\nconst OPTIONS = sym('__options__');\nconst ROOT_NODES = sym('__rootNodes__');\nconst WRAPPING_COMPONENT = sym('__wrappingComponent__');\nconst LINKED_ROOTS = sym('__linkedRoots__');\nconst UPDATED_BY = sym('__updatedBy__');\n\n/**\n * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n * function.\n *\n * @param {ReactWrapper} wrapper\n * @param {Function} predicate\n * @param {Function} filter\n * @returns {ReactWrapper}\n */\nfunction findWhereUnwrapped(wrapper, predicate, filter = treeFilter) {\n  return wrapper.flatMap((n) => filter(n.getNodeInternal(), predicate));\n}\n\n/**\n * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n * the provided predicate function.\n *\n * @param {ReactWrapper} wrapper\n * @param {Function} predicate\n * @returns {ReactWrapper}\n */\nfunction filterWhereUnwrapped(wrapper, predicate) {\n  return wrapper.wrap(wrapper.getNodesInternal().filter(predicate).filter(Boolean));\n}\n\nfunction getRootNodeInternal(wrapper) {\n  if (wrapper[ROOT].length !== 1) {\n    throw new Error('getRootNodeInternal(wrapper) can only be called when wrapper wraps one node');\n  }\n  if (wrapper[ROOT] !== wrapper) {\n    return wrapper[ROOT_NODES][0];\n  }\n  return wrapper[ROOT][NODE];\n}\n\nfunction nodeParents(wrapper, node) {\n  return parentsOfNode(node, getRootNodeInternal(wrapper));\n}\n\nfunction privateSetNodes(wrapper, nodes) {\n  if (!nodes) {\n    privateSet(wrapper, NODE, null);\n    privateSet(wrapper, NODES, []);\n  } else if (!Array.isArray(nodes)) {\n    privateSet(wrapper, NODE, nodes);\n    privateSet(wrapper, NODES, [nodes]);\n  } else {\n    privateSet(wrapper, NODE, nodes[0]);\n    privateSet(wrapper, NODES, nodes);\n  }\n  privateSet(wrapper, 'length', wrapper[NODES].length);\n}\n\n/**\n * @class ReactWrapper\n */\nclass ReactWrapper {\n  constructor(nodes, root, passedOptions = {}) {\n    if (!global.window && !global.document) {\n      throw new Error('It looks like you called `mount()` without a global document being loaded.');\n    }\n    const options = makeOptions(passedOptions);\n\n    if (!root) {\n      const adapter = getAdapter(options);\n      if (!adapter.isValidElement(nodes)) {\n        throw new TypeError('ReactWrapper can only wrap valid elements');\n      }\n\n      const renderer = adapter.createRenderer({ mode: 'mount', ...options });\n      privateSet(this, RENDERER, renderer);\n      renderer.render(nodes, options.context);\n      privateSet(this, ROOT, this);\n      privateSetNodes(this, this[RENDERER].getNode());\n      privateSet(this, OPTIONS, options);\n      privateSet(this, LINKED_ROOTS, []);\n\n      if (isCustomComponent(options.wrappingComponent, adapter)) {\n        if (typeof this[RENDERER].getWrappingComponentRenderer !== 'function') {\n          throw new TypeError('your adapter does not support `wrappingComponent`. Try upgrading it!');\n        }\n\n        privateSet(\n          this,\n          WRAPPING_COMPONENT,\n          // eslint-disable-next-line no-use-before-define\n          new WrappingComponentWrapper(this, this[RENDERER].getWrappingComponentRenderer()),\n        );\n        this[LINKED_ROOTS].push(this[WRAPPING_COMPONENT]);\n      }\n    } else {\n      privateSet(this, RENDERER, root[RENDERER]);\n      privateSet(this, ROOT, root);\n      privateSetNodes(this, nodes);\n      privateSet(this, ROOT_NODES, root[NODES]);\n      privateSet(this, OPTIONS, root[OPTIONS]);\n      privateSet(this, LINKED_ROOTS, []);\n    }\n    privateSet(this, UNRENDERED, nodes);\n    privateSet(this, UPDATED_BY, null);\n  }\n\n  /**\n   * Returns the root wrapper\n   *\n   * @return {ReactWrapper}\n   */\n  root() {\n    return this[ROOT];\n  }\n\n  /**\n   * Returns the wrapped component.\n   *\n   * @return {ReactComponent}\n   */\n  getNodeInternal() {\n    if (this.length !== 1) {\n      throw new Error('ReactWrapper::getNode() can only be called when wrapping one node');\n    }\n    return this[NODES][0];\n  }\n\n  /**\n   * Returns the the wrapped components.\n   *\n   * @return {Array<ReactComponent>}\n   */\n  getNodesInternal() {\n    return this[NODES];\n  }\n\n  /**\n   * Returns the wrapped ReactElement.\n   *\n   * @return {ReactElement}\n   */\n  getElement() {\n    return this.single('getElement', () => getAdapter(this[OPTIONS]).nodeToElement(this[NODE]));\n  }\n\n  /**\n   * Returns the wrapped ReactElements.\n   *\n   * @return {Array<ReactElement>}\n   */\n  getElements() {\n    return this[NODES].map((n) => getAdapter(this[OPTIONS]).nodeToElement(n));\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getNode() {\n    throw new Error('ReactWrapper::getNode() is no longer supported. Use ReactWrapper::instance() instead');\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  getNodes() {\n    throw new Error('ReactWrapper::getNodes() is no longer supported.');\n  }\n\n  /**\n   * Returns the outer most DOMComponent of the current wrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {DOMComponent}\n   */\n  getDOMNode() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('getDOMNode', (n) => adapter.nodeToHostNode(n, true));\n  }\n\n  /**\n   * If the root component contained a ref, you can access it here and get the relevant\n   * react component instance or HTML element instance.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {String} refname\n   * @returns {ReactComponent | HTMLElement}\n   */\n  ref(refname) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::ref(refname) can only be called on the root');\n    }\n    return this.instance().refs[refname];\n  }\n\n  /**\n   * Returns the wrapper's underlying instance.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * const inst = wrapper.instance();\n   * expect(inst).to.be.instanceOf(MyComponent);\n   * ```\n   * @returns {ReactComponent|DOMComponent}\n   */\n  instance() {\n    return this.single('instance', () => this[NODE].instance);\n  }\n\n  /**\n   * If a `wrappingComponent` was passed in `options`, this methods returns a `ReactWrapper` around\n   * the rendered `wrappingComponent`. This `ReactWrapper` can be used to update the\n   * `wrappingComponent`'s props, state, etc.\n   *\n   * @returns ReactWrapper\n   */\n  getWrappingComponent() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::getWrappingComponent() can only be called on the root');\n    }\n    if (!this[OPTIONS].wrappingComponent) {\n      throw new Error('ReactWrapper::getWrappingComponent() can only be called on a wrapper that was originally passed a `wrappingComponent` option');\n    }\n    return this[WRAPPING_COMPONENT];\n  }\n\n  /**\n   * Forces a re-render. Useful to run before checking the render output if something external\n   * may be updating the state of the component somewhere.\n   *\n   * NOTE: no matter what instance this is called on, it will always update the root.\n   *\n   * @returns {ReactWrapper}\n   */\n  update() {\n    const root = this[ROOT];\n    if (this !== root) {\n      return root.update();\n    }\n    privateSetNodes(this, this[RENDERER].getNode());\n    this[LINKED_ROOTS].forEach((linkedRoot) => {\n      if (linkedRoot !== this[UPDATED_BY]) {\n        /* eslint-disable no-param-reassign */\n        // Only update a linked it root if it is not the originator of our update().\n        // This is needed to prevent infinite recursion when there is a bi-directional\n        // link between two roots.\n        linkedRoot[UPDATED_BY] = this;\n        try {\n          linkedRoot.update();\n        } finally {\n          linkedRoot[UPDATED_BY] = null;\n        }\n      }\n    });\n    return this;\n  }\n\n  /**\n   * A method that unmounts the component. This can be used to simulate a component going through\n   * and unmount/mount lifecycle.\n   *\n   * @returns {ReactWrapper}\n   */\n  unmount() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::unmount() can only be called on the root');\n    }\n    this.single('unmount', () => {\n      this[RENDERER].unmount();\n      this.update();\n    });\n    return this;\n  }\n\n  /**\n   * A method that re-mounts the component, if it is not currently mounted.\n   * This can be used to simulate a component going through\n   * an unmount/mount lifecycle.\n   *\n   * @returns {ReactWrapper}\n   */\n  mount() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::mount() can only be called on the root');\n    }\n    this[RENDERER].render(this[UNRENDERED], this[OPTIONS].context, () => this.update());\n    return this;\n  }\n\n  /**\n   * A method that sets the props of the root component, and re-renders. Useful for when you are\n   * wanting to test how the component behaves over time with changing props. Calling this, for\n   * instance, will call the `componentWillReceiveProps` lifecycle method.\n   *\n   * Similar to `setState`, this method accepts a props object and will merge it in with the already\n   * existing props.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {Object} props object\n   * @param {Function} cb - callback function\n   * @returns {ReactWrapper}\n   */\n  setProps(props, callback = undefined) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::setProps() can only be called on the root');\n    }\n    if (arguments.length > 1 && typeof callback !== 'function') {\n      throw new TypeError('ReactWrapper::setProps() expects a function as its second argument');\n    }\n    const adapter = getAdapter(this[OPTIONS]);\n    this[UNRENDERED] = cloneElement(adapter, this[UNRENDERED], props);\n    this[RENDERER].render(this[UNRENDERED], null, () => {\n      this.update();\n      if (callback) {\n        callback();\n      }\n    });\n    return this;\n  }\n\n  /**\n   * A method to invoke `setState` on the root component instance similar to how you might in the\n   * definition of the component, and re-renders.  This method is useful for testing your component\n   * in hard to achieve states, however should be used sparingly. If possible, you should utilize\n   * your component's external API in order to get it into whatever state you want to test, in order\n   * to be as accurate of a test as possible. This is not always practical, however.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {Object} state to merge\n   * @param {Function} cb - callback function\n   * @returns {ReactWrapper}\n   */\n  setState(state, callback = undefined) {\n    if (this.instance() === null || this.getNodeInternal().nodeType !== 'class') {\n      throw new Error('ReactWrapper::setState() can only be called on class components');\n    }\n    if (arguments.length > 1 && typeof callback !== 'function') {\n      throw new TypeError('ReactWrapper::setState() expects a function as its second argument');\n    }\n    this.instance().setState(state, () => {\n      this.update();\n      if (callback) {\n        const adapter = getAdapter(this[OPTIONS]);\n        const instance = this.instance();\n        if (adapter.invokeSetStateCallback) {\n          adapter.invokeSetStateCallback(instance, callback);\n        } else {\n          callback.call(instance);\n        }\n      }\n    });\n    return this;\n  }\n\n  /**\n   * A method that sets the context of the root component, and re-renders. Useful for when you are\n   * wanting to test how the component behaves over time with changing contexts.\n   *\n   * NOTE: can only be called on a wrapper instance that is also the root instance.\n   *\n   * @param {Object} context object\n   * @returns {ReactWrapper}\n   */\n  setContext(context) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::setContext() can only be called on the root');\n    }\n    if (!this[OPTIONS].context) {\n      throw new Error('ReactWrapper::setContext() can only be called on a wrapper that was originally passed a context option');\n    }\n    this[RENDERER].render(this[UNRENDERED], context, () => this.update());\n    return this;\n  }\n\n  /**\n   * Whether or not a given react element exists in the mount render tree.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.contains(<div className=\"foo bar\" />)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement|Array<ReactElement>} nodeOrNodes\n   * @returns {Boolean}\n   */\n  contains(nodeOrNodes) {\n    const adapter = getAdapter(this[OPTIONS]);\n\n    const predicate = Array.isArray(nodeOrNodes)\n      ? (other) => containsChildrenSubArray(\n        nodeEqual,\n        other,\n        nodeOrNodes.map((node) => adapter.elementToNode(node)),\n      )\n      : (other) => nodeEqual(adapter.elementToNode(nodeOrNodes), other);\n\n    return findWhereUnwrapped(this, predicate).length > 0;\n  }\n\n  /**\n   * Whether or not a given react element exists in the current render tree.\n   * It will determine if one of the wrappers element \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrappers element and equals to each other.\n   *\n   * Example:\n   * ```\n   * // MyComponent outputs <div><div class=\"foo\">Hello</div></div>\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.containsMatchingElement(<div>Hello</div>)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement} node\n   * @returns {Boolean}\n   */\n  containsMatchingElement(node) {\n    const rstNode = getAdapter(this[OPTIONS]).elementToNode(node);\n    const predicate = (other) => nodeMatches(rstNode, other, (a, b) => a <= b);\n    return findWhereUnwrapped(this, predicate).length > 0;\n  }\n\n  /**\n   * Whether or not all the given react elements exist in the current render tree.\n   * It will determine if one of the wrappers element \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrappers element and equals to each other.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.containsAllMatchingElements([\n   *   <div>Hello</div>,\n   *   <div>Goodbye</div>,\n   * ])).to.equal(true);\n   * ```\n   *\n   * @param {Array<ReactElement>} nodes\n   * @returns {Boolean}\n   */\n  containsAllMatchingElements(nodes) {\n    if (!Array.isArray(nodes)) {\n      throw new TypeError('nodes should be an Array');\n    }\n\n    return nodes.every((node) => this.containsMatchingElement(node));\n  }\n\n  /**\n   * Whether or not one of the given react elements exists in the current render tree.\n   * It will determine if one of the wrappers element \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrappers element and equals to each other.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.containsAnyMatchingElements([\n   *   <div>Hello</div>,\n   *   <div>Goodbye</div>,\n   * ])).to.equal(true);\n   * ```\n   *\n   * @param {Array<ReactElement>} nodes\n   * @returns {Boolean}\n   */\n  containsAnyMatchingElements(nodes) {\n    return Array.isArray(nodes) && nodes.some((node) => this.containsMatchingElement(node));\n  }\n\n  /**\n   * Whether or not a given react element exists in the render tree.\n   *\n   * Example:\n   * ```\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.contains(<div className=\"foo bar\" />)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement} node\n   * @returns {Boolean}\n   */\n  equals(node) {\n    return this.single('equals', () => nodeEqual(this.getNodeInternal(), node));\n  }\n\n  /**\n   * Whether or not a given react element matches the render tree.\n   * Match is based on the expected element and not on wrapper root node.\n   * It will determine if the wrapper root node \"looks like\" the expected\n   * element by checking if all props of the expected element are present\n   * on the wrapper root node and equals to each other.\n   *\n   * Example:\n   * ```\n   * // MyComponent outputs <div class=\"foo\">Hello</div>\n   * const wrapper = mount(<MyComponent />);\n   * expect(wrapper.matchesElement(<div>Hello</div>)).to.equal(true);\n   * ```\n   *\n   * @param {ReactElement} node\n   * @returns {Boolean}\n   */\n  matchesElement(node) {\n    return this.single('matchesElement', () => {\n      const adapter = getAdapter(this[OPTIONS]);\n      const rstNode = adapter.elementToNode(node);\n      return nodeMatches(rstNode, this.getNodeInternal(), (a, b) => a <= b);\n    });\n  }\n\n  /**\n   * Finds every node in the render tree of the current wrapper that matches the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  find(selector) {\n    return this.wrap(reduceTreesBySelector(selector, this.getNodesInternal()));\n  }\n\n  /**\n   * Returns whether or not current node matches a provided selector.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {boolean}\n   */\n  is(selector) {\n    const predicate = buildPredicate(selector);\n    return this.single('is', (n) => predicate(n));\n  }\n\n  /**\n   * Returns true if the component rendered nothing, i.e., null or false.\n   *\n   * @returns {boolean}\n   */\n  isEmptyRender() {\n    const nodes = this.getNodesInternal();\n\n    return nodes.every((node) => renderedDive(node));\n  }\n\n  /**\n   * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n   * the provided predicate function.\n   *\n   * @param {Function} predicate\n   * @returns {ReactWrapper}\n   */\n  filterWhere(predicate) {\n    return filterWhereUnwrapped(this, (n) => predicate(this.wrap(n)));\n  }\n\n  /**\n   * Returns a new wrapper instance with only the nodes of the current wrapper instance that match\n   * the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  filter(selector) {\n    const predicate = buildPredicate(selector);\n    return filterWhereUnwrapped(this, predicate);\n  }\n\n  /**\n   * Returns a new wrapper instance with only the nodes of the current wrapper that did not match\n   * the provided selector. Essentially the inverse of `filter`.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  not(selector) {\n    const predicate = buildPredicate(selector);\n    return filterWhereUnwrapped(this, (n) => !predicate(n));\n  }\n\n  /**\n   * Returns a string of the rendered text of the current render tree.  This function should be\n   * looked at with skepticism if being used to test what the actual HTML output of the component\n   * will be. If that is what you would like to test, use enzyme's `render` function instead.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {String}\n   */\n  text() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('text', (n) => getTextFromHostNodes(n, adapter));\n  }\n\n  /**\n   * Returns the HTML of the node.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {String}\n   */\n  html() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('html', (n) => getHTMLFromHostNodes(n, adapter));\n  }\n\n  /**\n   * Returns the current node rendered to HTML and wrapped in a CheerioWrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {CheerioWrapper}\n   */\n  render() {\n    const html = this.html();\n    return loadCheerioRoot(html);\n  }\n\n  /**\n   * Used to simulate events. Pass an eventname and (optionally) event arguments. This method of\n   * testing events should be met with some skepticism.\n   *\n   * @param {String} event\n   * @param {Object} mock (optional)\n   * @returns {ReactWrapper}\n   */\n  simulate(event, mock = {}) {\n    return this.single('simulate', (n) => {\n      this[RENDERER].simulateEvent(n, event, mock);\n      this[ROOT].update();\n      return this;\n    });\n  }\n\n  /**\n   * Used to simulate throwing a rendering error. Pass an error to throw.\n   *\n   * @param {String} error\n   * @returns {ReactWrapper}\n   */\n  simulateError(error) {\n    if (this[ROOT] === this) {\n      throw new Error('ReactWrapper::simulateError() may not be called on the root');\n    }\n\n    return this.single('simulateError', (thisNode) => {\n      if (thisNode.nodeType === 'host') {\n        throw new Error('ReactWrapper::simulateError() can only be called on custom components');\n      }\n\n      const renderer = this[RENDERER];\n      if (typeof renderer.simulateError !== 'function') {\n        throw new TypeError('your adapter does not support `simulateError`. Try upgrading it!');\n      }\n\n      const rootNode = getRootNodeInternal(this);\n      const nodeHierarchy = [thisNode].concat(nodeParents(this, thisNode));\n      renderer.simulateError(nodeHierarchy, rootNode, error);\n\n      this[ROOT].update();\n      return this;\n    });\n  }\n\n  /**\n   * Returns the props hash for the root node of the wrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @returns {Object}\n   */\n  props() {\n    return this.single('props', propsOfNode);\n  }\n\n  /**\n   * Returns the state hash for the root node of the wrapper. Optionally pass in a prop name and it\n   * will return just that value.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {String} name (optional)\n   * @returns {*}\n   */\n  state(name) {\n    const thisNode = this[ROOT] === this ? this[RENDERER].getNode() : this.getNodeInternal();\n    if (this.instance() === null || thisNode.nodeType !== 'class') {\n      throw new Error('ReactWrapper::state() can only be called on class components');\n    }\n    const _state = this.single('state', () => this.instance().state);\n    if (typeof name !== 'undefined') {\n      if (_state == null) {\n        throw new TypeError(`ReactWrapper::state(\"${name}\") requires that \\`state\\` not be \\`null\\` or \\`undefined\\``);\n      }\n      return _state[name];\n    }\n    return _state;\n  }\n\n  /**\n   * Returns the context hash for the root node of the wrapper.\n   * Optionally pass in a prop name and it will return just that value.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {String} name (optional)\n   * @returns {*}\n   */\n  context(name) {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::context() can only be called on the root');\n    }\n    const instance = this.single('context', () => this.instance());\n    if (instance === null) {\n      throw new Error('ReactWrapper::context() can only be called on wrapped nodes that have a non-null instance');\n    }\n    const _context = instance.context;\n    if (typeof name !== 'undefined') {\n      return _context[name];\n    }\n    return _context;\n  }\n\n  /**\n   * Returns a new wrapper with all of the children of the current wrapper.\n   *\n   * @param {EnzymeSelector} [selector]\n   * @returns {ReactWrapper}\n   */\n  children(selector) {\n    const allChildren = this.flatMap((n) => childrenOfNode(n.getNodeInternal()));\n    return selector ? allChildren.filter(selector) : allChildren;\n  }\n\n  /**\n   * Returns a new wrapper with a specific child\n   *\n   * @param {Number} [index]\n   * @returns {ReactWrapper}\n   */\n  childAt(index) {\n    return this.single('childAt', () => this.children().at(index));\n  }\n\n  /**\n   * Returns a wrapper around all of the parents/ancestors of the wrapper. Does not include the node\n   * in the current wrapper.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {EnzymeSelector} [selector]\n   * @returns {ReactWrapper}\n   */\n  parents(selector) {\n    return this.single('parents', (n) => {\n      const allParents = this.wrap(nodeParents(this, n));\n      return selector ? allParents.filter(selector) : allParents;\n    });\n  }\n\n  /**\n   * Returns a wrapper around the immediate parent of the current node.\n   *\n   * @returns {ReactWrapper}\n   */\n  parent() {\n    return this.flatMap((n) => [n.parents().get(0)]);\n  }\n\n  /**\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {ReactWrapper}\n   */\n  closest(selector) {\n    if (this.is(selector)) {\n      return this;\n    }\n    const matchingAncestors = this.parents().filter(selector);\n    return matchingAncestors.length > 0 ? matchingAncestors.first() : this.findWhere(() => false);\n  }\n\n  /**\n   * Returns the value of  prop with the given name of the root node.\n   *\n   * @param {String} propName\n   * @returns {*}\n   */\n  prop(propName) {\n    return this.props()[propName];\n  }\n\n  /**\n   * Used to invoke a function prop.\n   * Will invoke an function prop and return its value.\n   *\n   * @param {String} propName\n   * @returns {Any}\n   */\n  invoke(propName) {\n    return this.single('invoke', () => {\n      const handler = this.prop(propName);\n      if (typeof handler !== 'function') {\n        throw new TypeError('ReactWrapper::invoke() requires the name of a prop whose value is a function');\n      }\n      return (...args) => {\n        const response = typeof this[RENDERER].wrapInvoke === 'function'\n          ? this[RENDERER].wrapInvoke(() => handler(...args))\n          : handler(...args);\n        this[ROOT].update();\n        return response;\n      };\n    });\n  }\n\n  /**\n   * Returns a wrapper of the node rendered by the provided render prop.\n   *\n   * @param {String} propName\n   * @returns {Function}\n   */\n  renderProp(propName) {\n    const adapter = getAdapter(this[OPTIONS]);\n    if (typeof adapter.wrap !== 'function') {\n      throw new RangeError('your adapter does not support `wrap`. Try upgrading it!');\n    }\n\n    return this.single('renderProp', (n) => {\n      if (n.nodeType === 'host') {\n        throw new TypeError('ReactWrapper::renderProp() can only be called on custom components');\n      }\n      if (typeof propName !== 'string') {\n        throw new TypeError('ReactWrapper::renderProp(): `propName` must be a string');\n      }\n      const props = this.props();\n      if (!hasOwn(props, propName)) {\n        throw new Error(`ReactWrapper::renderProp(): no prop called “${propName}“ found`);\n      }\n      const propValue = props[propName];\n      if (typeof propValue !== 'function') {\n        throw new TypeError(`ReactWrapper::renderProp(): expected prop “${propName}“ to contain a function, but it holds “${typeof propValue}“`);\n      }\n\n      return (...args) => {\n        const element = propValue(...args);\n        const wrapped = adapter.wrap(element);\n        return this.wrap(wrapped, null, this[OPTIONS]);\n      };\n    });\n  }\n\n  /**\n   * Returns the key assigned to the current node.\n   *\n   * @returns {String}\n   */\n  key() {\n    return this.single('key', (n) => (n.key === undefined ? null : n.key));\n  }\n\n  /**\n   * Returns the type of the root node of this wrapper. If it's a composite component, this will be\n   * the component constructor. If it's native DOM node, it will be a string.\n   *\n   * @returns {String|Function}\n   */\n  type() {\n    return this.single('type', (n) => typeOfNode(n));\n  }\n\n  /**\n   * Returns the name of the root node of this wrapper.\n   *\n   * In order of precedence => type.displayName -> type.name -> type.\n   *\n   * @returns {String}\n   */\n  name() {\n    const adapter = getAdapter(this[OPTIONS]);\n    return this.single('name', (n) => (\n      adapter.displayNameOfNode ? adapter.displayNameOfNode(n) : displayNameOfNode(n)\n    ));\n  }\n\n  /**\n   * Returns whether or not the current root node has the given class name or not.\n   *\n   * NOTE: can only be called on a wrapper of a single node.\n   *\n   * @param {String} className\n   * @returns {Boolean}\n   */\n  hasClass(className) {\n    if (typeof className === 'string' && className.indexOf('.') !== -1) {\n      // eslint-disable-next-line no-console\n      console.warn('It looks like you\\'re calling `ReactWrapper::hasClass()` with a CSS selector. hasClass() expects a class name, not a CSS selector.');\n    }\n    return this.single('hasClass', (n) => hasClassName(n, className));\n  }\n\n  /**\n   * Iterates through each node of the current wrapper and executes the provided function with a\n   * wrapper around the corresponding node passed in as the first argument.\n   *\n   * @param {Function} fn\n   * @returns {ReactWrapper}\n   */\n  forEach(fn) {\n    this.getNodesInternal().forEach((n, i) => fn.call(this, this.wrap(n), i));\n    return this;\n  }\n\n  /**\n   * Maps the current array of nodes to another array. Each node is passed in as a `ReactWrapper`\n   * to the map function.\n   *\n   * @param {Function} fn\n   * @returns {Array}\n   */\n  map(fn) {\n    return this.getNodesInternal().map((n, i) => fn.call(this, this.wrap(n), i));\n  }\n\n  /**\n   * Reduces the current array of nodes to another array.\n   * Each node is passed in as a `ShallowWrapper` to the reducer function.\n   *\n   * @param {Function} fn - the reducer function\n   * @param {*} initialValue - the initial value\n   * @returns {*}\n   */\n  reduce(fn, initialValue = undefined) {\n    if (arguments.length > 1) {\n      return this.getNodesInternal().reduce(\n        (accum, n, i) => fn.call(this, accum, this.wrap(n), i),\n        initialValue,\n      );\n    }\n    return this.getNodesInternal().reduce((accum, n, i) => fn.call(\n      this,\n      i === 1 ? this.wrap(accum) : accum,\n      this.wrap(n),\n      i,\n    ));\n  }\n\n  /**\n   * Reduces the current array of nodes to another array, from right to left. Each node is passed\n   * in as a `ShallowWrapper` to the reducer function.\n   *\n   * @param {Function} fn - the reducer function\n   * @param {*} initialValue - the initial value\n   * @returns {*}\n   */\n  reduceRight(fn, initialValue = undefined) {\n    if (arguments.length > 1) {\n      return this.getNodesInternal().reduceRight(\n        (accum, n, i) => fn.call(this, accum, this.wrap(n), i),\n        initialValue,\n      );\n    }\n    return this.getNodesInternal().reduceRight((accum, n, i) => fn.call(\n      this,\n      i === 1 ? this.wrap(accum) : accum,\n      this.wrap(n),\n      i,\n    ));\n  }\n\n  /**\n   * Returns a new wrapper with a subset of the nodes of the original wrapper, according to the\n   * rules of `Array#slice`.\n   *\n   * @param {Number} begin\n   * @param {Number} end\n   * @returns {ShallowWrapper}\n   */\n  slice(begin, end) {\n    return this.wrap(this.getNodesInternal().slice(begin, end));\n  }\n\n  /**\n   * Returns whether or not any of the nodes in the wrapper match the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {Boolean}\n   */\n  some(selector) {\n    if (this[ROOT] === this) {\n      throw new Error('ReactWrapper::some() can not be called on the root');\n    }\n    const predicate = buildPredicate(selector);\n    return this.getNodesInternal().some(predicate);\n  }\n\n  /**\n   * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n   *\n   * @param {Function} predicate\n   * @returns {Boolean}\n   */\n  someWhere(predicate) {\n    return this.getNodesInternal().some((n, i) => predicate.call(this, this.wrap(n), i));\n  }\n\n  /**\n   * Returns whether or not all of the nodes in the wrapper match the provided selector.\n   *\n   * @param {EnzymeSelector} selector\n   * @returns {Boolean}\n   */\n  every(selector) {\n    const predicate = buildPredicate(selector);\n    return this.getNodesInternal().every(predicate);\n  }\n\n  /**\n   * Returns whether or not any of the nodes in the wrapper pass the provided predicate function.\n   *\n   * @param {Function} predicate\n   * @returns {Boolean}\n   */\n  everyWhere(predicate) {\n    return this.getNodesInternal().every((n, i) => predicate.call(this, this.wrap(n), i));\n  }\n\n  /**\n   * Utility method used to create new wrappers with a mapping function that returns an array of\n   * nodes in response to a single node wrapper. The returned wrapper is a single wrapper around\n   * all of the mapped nodes flattened (and de-duplicated).\n   *\n   * @param {Function} fn\n   * @returns {ReactWrapper}\n   */\n  flatMap(fn) {\n    const nodes = this.getNodesInternal().map((n, i) => fn.call(this, this.wrap(n), i));\n    const flattened = flat(nodes, 1);\n    return this.wrap(flattened.filter(Boolean));\n  }\n\n  /**\n   * Finds all nodes in the current wrapper nodes' render trees that match the provided predicate\n   * function.\n   *\n   * @param {Function} predicate\n   * @returns {ReactWrapper}\n   */\n  findWhere(predicate) {\n    return findWhereUnwrapped(this, (n) => {\n      const node = this.wrap(n);\n      return node.length > 0 && predicate(node);\n    });\n  }\n\n  /**\n   * Returns the node at a given index of the current wrapper.\n   *\n   * @param {Number} index\n   * @returns {ReactElement}\n   */\n  get(index) {\n    return this.getElements()[index];\n  }\n\n  /**\n   * Returns a wrapper around the node at a given index of the current wrapper.\n   *\n   * @param {Number} index\n   * @returns {ReactWrapper}\n   */\n  at(index) {\n    const nodes = this.getNodesInternal();\n    if (index < nodes.length) {\n      return this.wrap(nodes[index]);\n    }\n    return this.wrap([]);\n  }\n\n  /**\n   * Returns a wrapper around the first node of the current wrapper.\n   *\n   * @returns {ReactWrapper}\n   */\n  first() {\n    return this.at(0);\n  }\n\n  /**\n   * Returns a wrapper around the last node of the current wrapper.\n   *\n   * @returns {ReactWrapper}\n   */\n  last() {\n    return this.at(this.length - 1);\n  }\n\n  /**\n   * Delegates to exists()\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    // eslint-disable-next-line no-console\n    console.warn('Enzyme::Deprecated method isEmpty() called, use exists() instead.');\n    return !this.exists();\n  }\n\n  /**\n   * Returns true if the current wrapper has nodes. False otherwise.\n   * If called with a selector it returns `.find(selector).exists()` instead.\n   *\n   * @param {EnzymeSelector} selector (optional)\n   * @returns {boolean}\n   */\n  exists(selector = null) {\n    return arguments.length > 0 ? this.find(selector).exists() : this.length > 0;\n  }\n\n  /**\n   * Utility method that throws an error if the current instance has a length other than one.\n   * This is primarily used to enforce that certain methods are only run on a wrapper when it is\n   * wrapping a single node.\n   *\n   * @param {Function} fn\n   * @returns {*}\n   */\n  single(name, fn) {\n    const fnName = typeof name === 'string' ? name : 'unknown';\n    const callback = typeof fn === 'function' ? fn : name;\n    if (this.length !== 1) {\n      throw new Error(`Method “${fnName}” is meant to be run on 1 node. ${this.length} found instead.`);\n    }\n    return callback.call(this, this.getNodeInternal());\n  }\n\n  /**\n   * Helpful utility method to create a new wrapper with the same root as the current wrapper, with\n   * any nodes passed in as the first parameter automatically wrapped.\n   *\n   * @param {ReactWrapper|ReactElement|Array<ReactElement>} node\n   * @returns {ReactWrapper}\n   */\n  wrap(node, root = this[ROOT], ...args) {\n    if (node instanceof ReactWrapper) {\n      return node;\n    }\n    return new ReactWrapper(node, root, ...args);\n  }\n\n  /**\n   * Returns an HTML-like string of the shallow render for debugging purposes.\n   *\n   * @param {Object} [options] - Property bag of additional options.\n   * @param {boolean} [options.ignoreProps] - if true, props are omitted from the string.\n   * @param {boolean} [options.verbose] - if true, arrays and objects to be verbosely printed.\n   * @returns {String}\n   */\n  debug(options = {}) {\n    return debugNodes(this.getNodesInternal(), options);\n  }\n\n  /**\n   * Invokes intercepter and returns itself. intercepter is called with itself.\n   * This is helpful when debugging nodes in method chains.\n   * @param fn\n   * @returns {ReactWrapper}\n   */\n  tap(intercepter) {\n    intercepter(this);\n    return this;\n  }\n\n  /**\n   * Detaches the react tree from the DOM. Runs `ReactDOM.unmountComponentAtNode()` under the hood.\n   *\n   * This method will most commonly be used as a \"cleanup\" method if you decide to use the\n   * `attachTo` option in `mount(node, options)`.\n   *\n   * The method is intentionally not \"fluent\" (in that it doesn't return `this`) because you should\n   * not be doing anything with this wrapper after this method is called.\n   */\n  detach() {\n    if (this[ROOT] !== this) {\n      throw new Error('ReactWrapper::detach() can only be called on the root');\n    }\n    if (!this[OPTIONS].attachTo) {\n      throw new Error('ReactWrapper::detach() can only be called on when the `attachTo` option was passed into `mount()`.');\n    }\n    this[RENDERER].unmount();\n  }\n\n  /**\n   * Strips out all the not host-nodes from the list of nodes\n   *\n   * This method is useful if you want to check for the presence of host nodes\n   * (actually rendered HTML elements) ignoring the React nodes.\n   */\n  hostNodes() {\n    return this.filterWhere((n) => typeof n.type() === 'string');\n  }\n}\n\n/**\n * A *special* \"root\" wrapper that represents the component passed as `wrappingComponent`.\n * It is linked to the primary root such that updates to it will update the primary,\n * and vice versa.\n *\n * @class WrappingComponentWrapper\n */\nclass WrappingComponentWrapper extends ReactWrapper {\n  /* eslint-disable class-methods-use-this */\n  constructor(root, renderer) {\n    super(renderer.getNode(), root);\n\n    privateSet(this, ROOT, this);\n    privateSet(this, RENDERER, renderer);\n    this[LINKED_ROOTS].push(root);\n  }\n\n  getWrappingComponent() {\n    throw new TypeError('ReactWrapper::getWrappingComponent() can only be called on the root');\n  }\n}\n\nif (ITERATOR_SYMBOL) {\n  Object.defineProperty(ReactWrapper.prototype, ITERATOR_SYMBOL, {\n    configurable: true,\n    value: function iterator() {\n      const iter = this[NODES][ITERATOR_SYMBOL]();\n      const adapter = getAdapter(this[OPTIONS]);\n      return {\n        [ITERATOR_SYMBOL]() { return this; },\n        next() {\n          const next = iter.next();\n          if (next.done) {\n            return { done: true };\n          }\n          return {\n            done: false,\n            value: adapter.nodeToElement(next.value),\n          };\n        },\n      };\n    },\n  });\n}\n\nfunction privateWarning(prop, extraMessage) {\n  Object.defineProperty(ReactWrapper.prototype, prop, {\n    get() {\n      throw new Error(trim(`\n        Attempted to access ReactWrapper::${prop}, which was previously a private property on\n        Enzyme ReactWrapper instances, but is no longer and should not be relied upon.\n        ${extraMessage}\n      `));\n    },\n    enumerable: false,\n    configurable: false,\n  });\n}\n\nprivateWarning('node', 'Consider using the getElement() method instead.');\nprivateWarning('nodes', 'Consider using the getElements() method instead.');\nprivateWarning('renderer', '');\nprivateWarning('options', '');\nprivateWarning('complexSelector', '');\n\nexport default ReactWrapper;\n"],"mappings":"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","ignoreList":[]}